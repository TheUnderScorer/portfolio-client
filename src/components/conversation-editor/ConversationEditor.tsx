import * as React from 'react';import { KeyboardEventHandler, useEffect, useRef } from 'react';import * as Yup from 'yup';import { FormikProps, withFormik } from 'formik';import ConversationEditorProps from './types/ConversationEditorProps';import MessageInput from '../../types/graphql/inputs/MessageInput';import { FlexFormSection, FormSection } from '../styled/form';import { InputAdornment, TextField } from '@material-ui/core';import FormikInput from '../formik/FormikInput';import { EditorForm, MessageSection } from './styled';import { FaIcon } from '../styled/typography';import { CtaButton } from '../styled/buttons';import usePrevious from '../../hooks/usePrevious';const validationSchema = Yup.object<MessageInput>().shape( {    content: Yup.string().max( 500, 'Your message cannot contain more than 500 characters.' ).required( 'Provide your message.' ),} );const ConversationEditor = ( { mutation, disabled, values, submitForm, isSubmitting }: ConversationEditorProps & FormikProps<MessageInput> ) =>{    const [ , mutationResult ] = mutation;    const wasSubmitting = usePrevious( isSubmitting );    const handleKeyPress: KeyboardEventHandler = event =>    {        if ( event.key === 'Enter' && !event.shiftKey ) {            submitForm();        }    };    const messageInputRef = useRef<HTMLInputElement>();    useEffect( () =>    {        if ( wasSubmitting && !isSubmitting && messageInputRef.current ) {            messageInputRef.current.focus();        }    }, [ isSubmitting, wasSubmitting ] );    return (        <EditorForm>            <FlexFormSection>                <MessageSection filled={ !!values.content } width="70%">                    <FormikInput id="content" name="content" render={ ( { form, field } ) =>                        <TextField                            InputProps={ {                                startAdornment: (                                                    <InputAdornment position="start">                                                        <FaIcon icon="reply"/>                                                    </InputAdornment>                                                )                            } }                            placeholder="Enter your message here..."                            disabled={ mutationResult.loading || disabled }                            multiline                            inputRef={ messageInputRef }                            fullWidth                            rowsMax={ 3 }                            margin="none"                            variant="standard"                            onKeyDown={ handleKeyPress }                            error={ !!form.errors.content && !!form.touched.content }                            { ...field }                        />                    }/>                </MessageSection>                <FormSection width="30%">                    <CtaButton ripple={ true } flat={ true }>                        Send                    </CtaButton>                </FormSection>            </FlexFormSection>        </EditorForm>    )};const wrapper = withFormik<ConversationEditorProps, MessageInput>( {    mapPropsToValues: ( { conversationID } ) =>                      {                          return {                              conversationID,                              content: ''                          }                      },    handleSubmit:     async ( values, formikBag ) =>                      {                          const [ mutationFn ] = formikBag.props.mutation;                          const result = await mutationFn( {                              variables: {                                  input: {                                      ...values                                  }                              }                          } );                          if ( result.data ) {                              formikBag.resetForm();                          }                      },    validationSchema} );export default wrapper( ConversationEditor );